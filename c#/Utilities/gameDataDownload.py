import requests
import json 
print("go")
payload =["28507048df9b4bfdefef545e3b41df665786d62f",{"code":"using System.Collections.Generic;\nusing FallChallenge2020.Agents;\nusing FallChallenge2020.Common;\nusing FallChallenge2020.Models;\nusing System;\nusing System.Text;\nusing System.Linq;\nusing FallChallenge2020.Actions;\nusing System.IO;\n\n\n // 14/11/2020 12:16\n\nnamespace FallChallenge2020\n{\n    public class Constants\n    {\n        public const int IngredientTiers = 4;\n    }\n}\n\n\nnamespace FallChallenge2020\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            var agent = new SimpleAgent();\n            // game loop\n            while (true)\n            {\n                var game = new Game ();\n                game.Initialize();\n                var action = agent.GetAction(game);\n\n                Io.WriteLine(action.GetAction());\n            }\n        }\n\n        \n    }\n}\nnamespace FallChallenge2020.Actions\n{\n    public class BrewAction : IAction\n    {\n        private readonly int _actionId;\n\n        public BrewAction(int actionId)\n        {\n            _actionId = actionId;\n        }\n\n        public string GetAction()\n        {\n            return $\"BREW {_actionId}\";\n        }\n    }\n}\nnamespace FallChallenge2020.Actions\n{\n    public class CastAction : IAction\n    {\n        private readonly int _actionId;\n\n        public CastAction(int actionId)\n        {\n            _actionId = actionId;\n        }\n\n        public string GetAction()\n        {\n            return $\"CAST {_actionId}\";\n        }\n    }\n}\nnamespace FallChallenge2020.Actions\n{\n    public interface IAction\n    {\n        string GetAction();\n    }\n}\nnamespace FallChallenge2020.Actions\n{\n    public class RestAction : IAction\n    {\n        public string GetAction()\n        {\n            return \"REST\";\n        }\n    }\n}\n\nnamespace FallChallenge2020.Actions\n{\n    public class WaitAction : IAction\n    {\n        public string GetAction()\n        {\n            return \"WAIT\";\n        }\n    }\n}\n\n\nnamespace FallChallenge2020.Agents\n{\n    internal class SimpleAgent\n    {\n        public IAction GetAction(Game game)\n        {\n            var potion = game.Potions[0];\n            var inventory = game.MyPlayer.Inventory;\n\n            foreach (var spell in game.Spells)\n            {\n                Io.Debug(spell.ToString());\n            }\n\n            Io.Debug($\"Building potion {potion}\");\n\n            var ingredientsCost = potion.IngredientsCost;\n            for (var i = 0; i < Constants.IngredientTiers; i++)\n            {\n                if (ingredientsCost[i] > 0)\n                {\n                    Io.Debug($\"Needs {ingredientsCost[i]} of Tier{i}\");\n                    if (inventory[i] > 0)\n                    {\n                        Io.Debug($\"Has {inventory[i]} of Tier{i}\");\n                    }\n\n                    if (inventory[i] < ingredientsCost[i])\n                    {\n                        Io.Debug($\"Needs spell for Tier{i}\");\n                        var requiredSpell = game.Spells.First(s => s.IngredientsCost[i] > 0);\n                        var spell = GetNextSpell(requiredSpell, inventory, game.Spells);\n                        Io.Debug($\"Got spell {spell}\");\n                    }\n                }\n            }\n            return new WaitAction();\n        }\n\n        private IAction GetNextSpell(Spell spell, int[] inventory, List<Spell> spells)\n        {\n            var ingredientsCost = spell.IngredientsCost;\n            for (var i = 0; i < Constants.IngredientTiers; i++)\n            {\n                if (ingredientsCost[i] > 0)\n                {\n                    Io.Debug($\"Needs {ingredientsCost[i]} of Tier{i}\");\n                    if (inventory[i] > 0)\n                    {\n                        Io.Debug($\"Has {inventory[i]} of Tier{i}\");\n                    }\n\n                    if (inventory[i] < ingredientsCost[i])\n                    {\n                        Io.Debug($\"Needs spell for Tier{i}\");\n                        var requiredSpell = spells.First(s => s.IngredientsCost[i] > 0);\n                        return GetNextSpell(requiredSpell, inventory, spells);\n                    }\n                }\n            }\n\n            return new CastAction(spell.ActionId);\n        }\n    }\n}\nnamespace FallChallenge2020.Common\n{\n    public static class Constants\n    {\n        public static readonly bool IsDebugOn = true;\n\n        public static readonly bool IsForInput = true;\n\n        public static readonly bool IsLocalRun = false;\n    }\n}\n\nnamespace FallChallenge2020.Common\n{\n    public static class Io\n    {\n        private static StreamReader _file;\n\n        public static void Initialize()\n        {\n            if (Constants.IsLocalRun)\n            {\n                _file = new StreamReader(@\".\\in.txt\");\n            }\n        }\n\n        public static void Debug(string output)\n        {\n            if (Constants.IsDebugOn || Constants.IsForInput)\n            {\n                Console.Error.WriteLine(output);\n            }\n        }\n\n        public static void WriteLine(string output)\n        {\n            Console.WriteLine(output);\n        }\n\n        public static string ReadLine()\n        {\n            if (Constants.IsLocalRun)\n            {\n                return _file.ReadLine();\n            }\n            else\n            {\n                var input = Console.ReadLine();\n\n                if (Constants.IsForInput)\n                {\n                    Debug(\"IN\");\n                    Debug(input);\n                    Debug(\"/IN\");\n                }\n                else\n                {\n                    Debug(input);\n                }\n\n                return input;\n            }\n        }\n    }\n}\n\nnamespace FallChallenge2020.Models\n{\n    public enum ActionType\n    {\n        Unknown,\n\n        Brew,\n\n        Cast,\n\n        OpponentCast\n    }\n\n    public static class ActionTypeExtension\n    {\n        public static ActionType FromString(string actionType)\n        {\n            if (actionType == \"BREW\")\n            {\n                return ActionType.Brew;\n            }\n\n            if (actionType == \"CAST\")\n            {\n                return ActionType.Cast;\n            }\n\n            if (actionType == \"OPPONENT_CAST\")\n            {\n                return ActionType.OpponentCast;\n            }\n\n            throw new ArgumentOutOfRangeException($\"Passed {actionType} for action type\");\n        }\n    }\n}\n\n\nnamespace FallChallenge2020.Models\n{\n    internal class Game\n    {\n        public List<Potion> Potions { get; private set; }\n\n        public List<Spell> Spells { get; private set; }\n\n        public List<Spell> OpponentSpells { get; private set; }\n\n        public Player[] Players { get; private set; }\n\n        public Player MyPlayer => Players[0];\n\n        public void Initialize()\n        {\n            Potions = new List<Potion>();\n            Spells = new List<Spell>();\n            OpponentSpells = new List<Spell>();\n            ParseActions();\n            Players = new[] { GetPlayer(), GetPlayer() };\n        }\n\n        private void ParseActions()\n        {\n            var numberOfActions = int.Parse(Io.ReadLine());\n\n            for (var i = 0; i < numberOfActions; i++)\n            {\n                var inputs = Io.ReadLine().Split(' ');\n\n                var actionType = ActionTypeExtension.FromString(inputs[1]);\n                if (actionType == ActionType.Brew)\n                {\n                    Potions.Add(new Potion(int.Parse(inputs[0]),\n                                           int.Parse(inputs[2]),\n                                           int.Parse(inputs[3]),\n                                           int.Parse(inputs[4]),\n                                           int.Parse(inputs[5]),\n                                           int.Parse(inputs[6])));\n                }\n                else if (actionType == ActionType.Cast)\n                {\n                    Spells.Add(new Spell(int.Parse(inputs[0]),\n                                         int.Parse(inputs[2]),\n                                         int.Parse(inputs[3]),\n                                         int.Parse(inputs[4]),\n                                         int.Parse(inputs[5]),\n                                         int.Parse(inputs[9]) != 0));\n                }\n                else if (actionType == ActionType.OpponentCast)\n                {\n                    OpponentSpells.Add(new Spell(int.Parse(inputs[0]),\n                                                 int.Parse(inputs[2]),\n                                                 int.Parse(inputs[3]),\n                                                 int.Parse(inputs[4]),\n                                                 int.Parse(inputs[5]),\n                                                 int.Parse(inputs[9]) != 0));\n                }\n            }\n        }\n\n        private Player GetPlayer()\n        {\n            var inputs = Io.ReadLine().Split(' ');\n            var myPlayer = new Player\n                           {\n                               Inventory = new[] { int.Parse(inputs[0]), int.Parse(inputs[1]), int.Parse(inputs[2]), int.Parse(inputs[3]) },\n                               Score = int.Parse(inputs[4])\n                           };\n            return myPlayer;\n        }\n    }\n}\nnamespace FallChallenge2020.Models\n{\n    internal class Player\n    {\n        public int[] Inventory { get; set; }\n\n        public int Score { get; set; }\n    }\n}\nnamespace FallChallenge2020.Models\n{\n    internal class Potion\n    {\n        public Potion(\n            int actionId,\n            int tier0IngredientCost,\n            int tier1IngredientCost,\n            int tier2IngredientCost,\n            int tier3IngredientCost,\n            int price)\n        {\n            ActionId = actionId;\n            Price = price;\n            IngredientsCost = new[] { -tier0IngredientCost, -tier1IngredientCost, -tier2IngredientCost, -tier3IngredientCost };\n        }\n\n        public int ActionId { get; }\n\n        public int Price { get; }\n\n        public int[] IngredientsCost { get; }\n\n        public override string ToString()\n        {\n            return $\"Potion {ActionId} {IngredientsCost[0]} {IngredientsCost[1]} {IngredientsCost[2]} {IngredientsCost[3]} {Price}\";\n        }\n    }\n}\nnamespace FallChallenge2020.Models\n{\n    internal class Spell\n    {\n        public Spell(\n            int actionId,\n            int tier0IngredientCost,\n            int tier1IngredientCost,\n            int tier2IngredientCost,\n            int tier3IngredientCost,\n            bool castable)\n        {\n            ActionId = actionId;\n            Castable = castable;\n            IngredientsCost = new[] { tier0IngredientCost, tier1IngredientCost, tier2IngredientCost, tier3IngredientCost };\n        }\n\n        public int ActionId { get; }\n\n        public bool Castable { get; }\n\n        public int[] IngredientsCost { get; }\n\n        public override string ToString()\n        {\n            return $\"Spell {ActionId} {IngredientsCost[0]} {IngredientsCost[1]} {IngredientsCost[2]} {IngredientsCost[3]} {Castable}\";\n        }\n    }\n}","programmingLanguageId":"C#","multi":{"agentsIds":[-1,-2],"gameOptions":"seed=-3120627540878635500\n"}}]


referer = "https://www.codingame.com/ide/27174983867561dc6cd4e41790d2bb84b51421df"


cookie = "_ga=GA1.1.1630631741.1582746373; _ga=GA1.2.1630631741.1582746373; rememberMe=1506970e7a28f168d0db9769bf52d2ea016c711; _fbp=fb.1.1584837655245.1512366443; _hjid=6d9a8b4d-006b-49aa-9310-504737ae0f6c; _hjIncludedInSample=1; _hjUserAttributesHash=995805a10738aa198ccbf3299b2c8436; _gid=GA1.2.362645380.1586974749; _gid=GA1.1.362645380.1586974749; wisepops=%7B%22csd%22%3A1%2C%22popups%22%3A%7B%7D%2C%22sub%22%3A0%2C%22ucrn%22%3A9%2C%22cid%22%3A%2238179%22%2C%22v%22%3A4%7D; cgSession=6e064662-f671-449e-8848-a626fac9a8ba; wisepops_visits=%5B%222020-04-17T22%3A39%3A55.984Z%22%2C%222020-04-17T06%3A39%3A18.641Z%22%2C%222020-04-16T21%3A49%3A49.788Z%22%2C%222020-04-16T21%3A46%3A11.901Z%22%5D; wisepops_session=%7B%22arrivalOnSite%22%3A%222020-04-17T22%3A39%3A55.984Z%22%2C%22mtime%22%3A%222020-04-17T22%3A39%3A57.390Z%22%2C%22pageviews%22%3A1%2C%22popups%22%3A%7B%7D%2C%22src%22%3Anull%2C%22utm%22%3A%7B%7D%7D; amplitude_id_ecc0b9f76710f07825ed40270d4623e5codingame.com=eyJkZXZpY2VJZCI6IjcyNGEwNGIzLWU1YjQtNDc4MS04YTBhLTYyYzRiYzRiZDE3OVIiLCJ1c2VySWQiOiIxNTA2OTcwIiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNTg3MTc3MTE1NjQxLCJsYXN0RXZlbnRUaW1lIjoxNTg3MTgwMzI3MjAzLCJldmVudElkIjo4NywiaWRlbnRpZnlJZCI6MTY5LCJzZXF1ZW5jZU51bWJlciI6MjU2fQ==; AWSALB=uKY7LEFdrMASjMubw0d5b3mu26jJaFMt9/s115KIboK/MIhlJ5WqkHXJ/+V/XlMIs2hJ0PYAAsLOKZhzChmcv5cMuHNxCK5YJxXvMJpzEN54vKqxwt8BZAIaIC0n; AWSALBCORS=uKY7LEFdrMASjMubw0d5b3mu26jJaFMt9/s115KIboK/MIhlJ5WqkHXJ/+V/XlMIs2hJ0PYAAsLOKZhzChmcv5cMuHNxCK5YJxXvMJpzEN54vKqxwt8BZAIaIC0n"
headers = {'Content-type':'application/json;charset=UTF-8', 
            'Accept':'application/json, text/plain, */*',
            'Referer': referer,
            'Cookie': cookie}
r = requests.post("https://www.codingame.com/services/TestSession/play", 
                    data=json.dumps(payload),
                    headers=headers)
data = r.json()['frames']

with open("../src/Multiplayer/FallChallenge2020/temp.txt", 'w') as output_file:
    for key in data:
        if 'stderr' in key:
            output = key['stderr']
            output_file.write(output)
            output_file.write("\n")
			
with open("../src/Multiplayer/FallChallenge2020/temp.txt", 'r') as input_file:
    with open("../src/Multiplayer/FallChallenge2020/in.txt", 'w') as output_file:
        writeLine = False
        lines = input_file.readlines()
        for i, line in enumerate(lines):
            line = line.rstrip()
            if line == "IN":
                writeLine = True
            elif line == "/IN":
                writeLine = False
            elif writeLine:   
                output_file.write(line + "\n")

